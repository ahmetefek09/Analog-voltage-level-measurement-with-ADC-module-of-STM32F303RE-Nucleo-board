
voltage_measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad4  08004ad4  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004ad4  08004ad4  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ad4  08004ad4  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          00000104  200000cc  200000cc  000200cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  000200cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ab5d  00000000  00000000  0002013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001783  00000000  00000000  0002ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007f0  00000000  00000000  0002c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000062a  00000000  00000000  0002cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fa97  00000000  00000000  0002d23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c11b  00000000  00000000  0004ccd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c566c  00000000  00000000  00058dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000020dc  00000000  00000000  0011e458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00120534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000cc 	.word	0x200000cc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004a84 	.word	0x08004a84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000d0 	.word	0x200000d0
 80001d4:	08004a84 	.word	0x08004a84

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <interpolation>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC3_Init(void);
/* USER CODE BEGIN PFP */
float interpolation(float adc_value){
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	ed87 0a01 	vstr	s0, [r7, #4]
	for(int i = 0; i < sample_points - 1; i++) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	e052      	b.n	8000aca <interpolation+0xb6>
	        if(adc_value >= measured[i] && adc_value <= measured[i + 1]) {
 8000a24:	4a3d      	ldr	r2, [pc, #244]	; (8000b1c <interpolation+0x108>)
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	edd3 7a00 	vldr	s15, [r3]
 8000a30:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3c:	db42      	blt.n	8000ac4 <interpolation+0xb0>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a36      	ldr	r2, [pc, #216]	; (8000b1c <interpolation+0x108>)
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	edd3 7a00 	vldr	s15, [r3]
 8000a4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a58:	d834      	bhi.n	8000ac4 <interpolation+0xb0>
	            // linear interpolation
	            float x1 = measured[i];
 8000a5a:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <interpolation+0x108>)
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	61bb      	str	r3, [r7, #24]
	            float x2 = measured[i + 1];
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <interpolation+0x108>)
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	617b      	str	r3, [r7, #20]
	            float y1 = actual[i];
 8000a74:	4a2a      	ldr	r2, [pc, #168]	; (8000b20 <interpolation+0x10c>)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
	            float y2 = actual[i + 1];
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <interpolation+0x10c>)
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
	            return y1 + ((adc_value - x1) * (y2 - y1)) / (x2 - x1);
 8000a8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a92:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a9a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aa2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000aa6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000aaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000aae:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000aba:	edd7 7a04 	vldr	s15, [r7, #16]
 8000abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac2:	e023      	b.n	8000b0c <interpolation+0xf8>
	for(int i = 0; i < sample_points - 1; i++) {
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	2b16      	cmp	r3, #22
 8000ace:	dda9      	ble.n	8000a24 <interpolation+0x10>
	        }
	    }
	// if ADC value is too low to be computable, return 1 as lowest voltage possible
	if(adc_value < measured[0])
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <interpolation+0x108>)
 8000ad2:	edd3 7a00 	vldr	s15, [r3]
 8000ad6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d503      	bpl.n	8000aec <interpolation+0xd8>
		return actual[0];
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <interpolation+0x10c>)
 8000ae6:	edd3 7a00 	vldr	s15, [r3]
 8000aea:	e00f      	b.n	8000b0c <interpolation+0xf8>
	// if ADC value is too high, return 24 as highest voltage possible
	if(adc_value > measured[sample_points - 1])
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <interpolation+0x108>)
 8000aee:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000af2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	dd03      	ble.n	8000b08 <interpolation+0xf4>
		return actual[sample_points - 1];
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <interpolation+0x10c>)
 8000b02:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000b06:	e001      	b.n	8000b0c <interpolation+0xf8>
	    // error status
	return -1;
 8000b08:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8000b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000060 	.word	0x20000060
 8000b20:	20000000 	.word	0x20000000
 8000b24:	00000000 	.word	0x00000000

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fad6 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f85a 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f95a 	bl	8000dec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b38:	f000 f928 	bl	8000d8c <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8000b3c:	f000 f8b6 	bl	8000cac <MX_ADC3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc3);
 8000b40:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <main+0xb0>)
 8000b42:	f000 fd4f 	bl	80015e4 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY)== HAL_OK){
 8000b46:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4a:	4823      	ldr	r0, [pc, #140]	; (8000bd8 <main+0xb0>)
 8000b4c:	f000 fe60 	bl	8001810 <HAL_ADC_PollForConversion>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d131      	bne.n	8000bba <main+0x92>
		  adc_value = HAL_ADC_GetValue(&hadc3);
 8000b56:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <main+0xb0>)
 8000b58:	f000 ff5c 	bl	8001a14 <HAL_ADC_GetValue>
 8000b5c:	ee07 0a90 	vmov	s15, r0
 8000b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <main+0xb4>)
 8000b66:	edc3 7a00 	vstr	s15, [r3]
		  volt = (adc_value / 4095.0)*3.3; // 12-bit resolution
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <main+0xb4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fc96 	bl	80004a0 <__aeabi_f2d>
 8000b74:	a314      	add	r3, pc, #80	; (adr r3, 8000bc8 <main+0xa0>)
 8000b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7a:	f7ff fe13 	bl	80007a4 <__aeabi_ddiv>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	460b      	mov	r3, r1
 8000b82:	4610      	mov	r0, r2
 8000b84:	4619      	mov	r1, r3
 8000b86:	a312      	add	r3, pc, #72	; (adr r3, 8000bd0 <main+0xa8>)
 8000b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8c:	f7ff fce0 	bl	8000550 <__aeabi_dmul>
 8000b90:	4602      	mov	r2, r0
 8000b92:	460b      	mov	r3, r1
 8000b94:	4610      	mov	r0, r2
 8000b96:	4619      	mov	r1, r3
 8000b98:	f7ff feec 	bl	8000974 <__aeabi_d2f>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <main+0xb8>)
 8000ba0:	6013      	str	r3, [r2, #0]
		  int_volt = interpolation(volt);
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <main+0xb8>)
 8000ba4:	edd3 7a00 	vldr	s15, [r3]
 8000ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bac:	f7ff ff32 	bl	8000a14 <interpolation>
 8000bb0:	eef0 7a40 	vmov.f32	s15, s0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <main+0xbc>)
 8000bb6:	edc3 7a00 	vstr	s15, [r3]
	  }

	  HAL_Delay(1000);
 8000bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bbe:	f000 faf3 	bl	80011a8 <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 8000bc2:	e7bd      	b.n	8000b40 <main+0x18>
 8000bc4:	f3af 8000 	nop.w
 8000bc8:	00000000 	.word	0x00000000
 8000bcc:	40affe00 	.word	0x40affe00
 8000bd0:	66666666 	.word	0x66666666
 8000bd4:	400a6666 	.word	0x400a6666
 8000bd8:	200000e8 	.word	0x200000e8
 8000bdc:	200001c0 	.word	0x200001c0
 8000be0:	200001c4 	.word	0x200001c4
 8000be4:	200001c8 	.word	0x200001c8

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0a6      	sub	sp, #152	; 0x98
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bf2:	2228      	movs	r2, #40	; 0x28
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 ff17 	bl	8004a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2258      	movs	r2, #88	; 0x58
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 ff09 	bl	8004a2a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c20:	2310      	movs	r3, #16
 8000c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fe20 	bl	800288c <HAL_RCC_OscConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c52:	f000 f931 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	230f      	movs	r3, #15
 8000c58:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c70:	2102      	movs	r1, #2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fe5e 	bl	8003934 <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c7e:	f000 f91b 	bl	8000eb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC34;
 8000c82:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000c86:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 f86d 	bl	8003d74 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ca0:	f000 f90a 	bl	8000eb8 <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3798      	adds	r7, #152	; 0x98
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000cd0:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d16:	2204      	movs	r2, #4
 8000d18:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d26:	4817      	ldr	r0, [pc, #92]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d28:	f000 fa62 	bl	80011f0 <HAL_ADC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000d32:	f000 f8c1 	bl	8000eb8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4810      	ldr	r0, [pc, #64]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d42:	f001 f95f 	bl	8002004 <HAL_ADCEx_MultiModeConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000d4c:	f000 f8b4 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_ADC3_Init+0xd8>)
 8000d6e:	f000 fe5f 	bl	8001a30 <HAL_ADC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000d78:	f000 f89e 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000e8 	.word	0x200000e8
 8000d88:	50000400 	.word	0x50000400

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_USART2_UART_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000d98:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dd0:	f003 f9ee 	bl	80041b0 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 f86d 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000138 	.word	0x20000138
 8000de8:	40004400 	.word	0x40004400

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a2a      	ldr	r2, [pc, #168]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4a24      	ldr	r2, [pc, #144]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e24:	6153      	str	r3, [r2, #20]
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_GPIO_Init+0xc4>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2120      	movs	r1, #32
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f001 fcf7 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <MX_GPIO_Init+0xc8>)
 8000e86:	f001 fb5f 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f001 fb50 	bl	8002548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000800 	.word	0x48000800

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efa:	2007      	movs	r0, #7
 8000efc:	f001 faf0 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <HAL_ADC_MspInit+0x74>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d123      	bne.n	8000f76 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0x78>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <HAL_ADC_MspInit+0x78>)
 8000f34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_ADC_MspInit+0x78>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_ADC_MspInit+0x78>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_ADC_MspInit+0x78>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_ADC_MspInit+0x78>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_ADC_MspInit+0x7c>)
 8000f72:	f001 fae9 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	50000400 	.word	0x50000400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400

08000f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_UART_MspInit+0x7c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d128      	bne.n	8001000 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_UART_MspInit+0x80>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <HAL_UART_MspInit+0x80>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_UART_MspInit+0x80>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_UART_MspInit+0x80>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_UART_MspInit+0x80>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_UART_MspInit+0x80>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fde:	230c      	movs	r3, #12
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffc:	f001 faa4 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40004400 	.word	0x40004400
 800100c:	40021000 	.word	0x40021000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f884 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800108c:	f7ff ffea 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	; (80010c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <LoopForever+0xe>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	; (80010d4 <LoopForever+0x16>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f003 fcc1 	bl	8004a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ba:	f7ff fd35 	bl	8000b28 <main>

080010be <LoopForever>:

LoopForever:
    b LoopForever
 80010be:	e7fe      	b.n	80010be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80010cc:	08004adc 	.word	0x08004adc
  ldr r2, =_sbss
 80010d0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80010d4:	200001d0 	.word	0x200001d0

080010d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC1_2_IRQHandler>
	...

080010dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x28>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x28>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f001 f9f7 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fee4 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000

08001108 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fa01 	bl	800252e <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f001 f9d7 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200000c0 	.word	0x200000c0
 8001160:	200000c8 	.word	0x200000c8
 8001164:	200000c4 	.word	0x200000c4

08001168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200000c8 	.word	0x200000c8
 800118c:	200001cc 	.word	0x200001cc

08001190 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;  
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200001cc 	.word	0x200001cc

080011a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000c8 	.word	0x200000c8

080011f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b09a      	sub	sp, #104	; 0x68
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e1e3      	b.n	80015d8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	2b00      	cmp	r3, #0
 8001220:	d176      	bne.n	8001310 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2b00      	cmp	r3, #0
 8001228:	d152      	bne.n	80012d0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe61 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d13b      	bne.n	80012d0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f001 f829 	bl	80022b0 <ADC_Disable>
 800125e:	4603      	mov	r3, r0
 8001260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b00      	cmp	r3, #0
 800126e:	d12f      	bne.n	80012d0 <HAL_ADC_Init+0xe0>
 8001270:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001274:	2b00      	cmp	r3, #0
 8001276:	d12b      	bne.n	80012d0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001280:	f023 0302 	bic.w	r3, r3, #2
 8001284:	f043 0202 	orr.w	r2, r3, #2
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800129a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012aa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ac:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <HAL_ADC_Init+0x308>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a92      	ldr	r2, [pc, #584]	; (80014fc <HAL_ADC_Init+0x30c>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9a      	lsrs	r2, r3, #18
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012c2:	e002      	b.n	80012ca <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f9      	bne.n	80012c4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012ec:	d110      	bne.n	8001310 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f023 0312 	bic.w	r3, r3, #18
 80012f6:	f043 0210 	orr.w	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	2b00      	cmp	r3, #0
 800131a:	f040 8150 	bne.w	80015be <HAL_ADC_Init+0x3ce>
 800131e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 814b 	bne.w	80015be <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 8143 	bne.w	80015be <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001340:	f043 0202 	orr.w	r2, r3, #2
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001350:	d004      	beq.n	800135c <HAL_ADC_Init+0x16c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6a      	ldr	r2, [pc, #424]	; (8001500 <HAL_ADC_Init+0x310>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_ADC_Init+0x170>
 800135c:	4b69      	ldr	r3, [pc, #420]	; (8001504 <HAL_ADC_Init+0x314>)
 800135e:	e000      	b.n	8001362 <HAL_ADC_Init+0x172>
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_ADC_Init+0x318>)
 8001362:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800136c:	d102      	bne.n	8001374 <HAL_ADC_Init+0x184>
 800136e:	4b64      	ldr	r3, [pc, #400]	; (8001500 <HAL_ADC_Init+0x310>)
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e01a      	b.n	80013aa <HAL_ADC_Init+0x1ba>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a61      	ldr	r2, [pc, #388]	; (8001500 <HAL_ADC_Init+0x310>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d103      	bne.n	8001386 <HAL_ADC_Init+0x196>
 800137e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e011      	b.n	80013aa <HAL_ADC_Init+0x1ba>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a60      	ldr	r2, [pc, #384]	; (800150c <HAL_ADC_Init+0x31c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d102      	bne.n	8001396 <HAL_ADC_Init+0x1a6>
 8001390:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <HAL_ADC_Init+0x320>)
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e009      	b.n	80013aa <HAL_ADC_Init+0x1ba>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a5d      	ldr	r2, [pc, #372]	; (8001510 <HAL_ADC_Init+0x320>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <HAL_ADC_Init+0x1b6>
 80013a0:	4b5a      	ldr	r3, [pc, #360]	; (800150c <HAL_ADC_Init+0x31c>)
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e001      	b.n	80013aa <HAL_ADC_Init+0x1ba>
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d108      	bne.n	80013ca <HAL_ADC_Init+0x1da>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <HAL_ADC_Init+0x1da>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_ADC_Init+0x1dc>
 80013ca:	2300      	movs	r3, #0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11c      	bne.n	800140a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013d0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d010      	beq.n	80013f8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d107      	bne.n	80013f2 <HAL_ADC_Init+0x202>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_ADC_Init+0x202>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_ADC_Init+0x204>
 80013f2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d108      	bne.n	800140a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	431a      	orrs	r2, r3
 8001406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001408:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7e5b      	ldrb	r3, [r3, #25]
 800140e:	035b      	lsls	r3, r3, #13
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001414:	2a01      	cmp	r2, #1
 8001416:	d002      	beq.n	800141e <HAL_ADC_Init+0x22e>
 8001418:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800141c:	e000      	b.n	8001420 <HAL_ADC_Init+0x230>
 800141e:	2200      	movs	r2, #0
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4313      	orrs	r3, r2
 800142e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001430:	4313      	orrs	r3, r2
 8001432:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d11b      	bne.n	8001476 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7e5b      	ldrb	r3, [r3, #25]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	3b01      	subs	r3, #1
 800144c:	045a      	lsls	r2, r3, #17
 800144e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001450:	4313      	orrs	r3, r2
 8001452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001456:	663b      	str	r3, [r7, #96]	; 0x60
 8001458:	e00d      	b.n	8001476 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001462:	f043 0220 	orr.w	r2, r3, #32
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f043 0201 	orr.w	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	2b01      	cmp	r3, #1
 800147c:	d054      	beq.n	8001528 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a22      	ldr	r2, [pc, #136]	; (800150c <HAL_ADC_Init+0x31c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d004      	beq.n	8001492 <HAL_ADC_Init+0x2a2>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <HAL_ADC_Init+0x320>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d140      	bne.n	8001514 <HAL_ADC_Init+0x324>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800149a:	d02a      	beq.n	80014f2 <HAL_ADC_Init+0x302>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a4:	d022      	beq.n	80014ec <HAL_ADC_Init+0x2fc>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80014ae:	d01a      	beq.n	80014e6 <HAL_ADC_Init+0x2f6>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80014b8:	d012      	beq.n	80014e0 <HAL_ADC_Init+0x2f0>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80014c2:	d00a      	beq.n	80014da <HAL_ADC_Init+0x2ea>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80014cc:	d002      	beq.n	80014d4 <HAL_ADC_Init+0x2e4>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	e023      	b.n	800151c <HAL_ADC_Init+0x32c>
 80014d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014d8:	e020      	b.n	800151c <HAL_ADC_Init+0x32c>
 80014da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014de:	e01d      	b.n	800151c <HAL_ADC_Init+0x32c>
 80014e0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80014e4:	e01a      	b.n	800151c <HAL_ADC_Init+0x32c>
 80014e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ea:	e017      	b.n	800151c <HAL_ADC_Init+0x32c>
 80014ec:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80014f0:	e014      	b.n	800151c <HAL_ADC_Init+0x32c>
 80014f2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80014f6:	e011      	b.n	800151c <HAL_ADC_Init+0x32c>
 80014f8:	200000c0 	.word	0x200000c0
 80014fc:	431bde83 	.word	0x431bde83
 8001500:	50000100 	.word	0x50000100
 8001504:	50000300 	.word	0x50000300
 8001508:	50000700 	.word	0x50000700
 800150c:	50000400 	.word	0x50000400
 8001510:	50000500 	.word	0x50000500
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001520:	4313      	orrs	r3, r2
 8001522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001524:	4313      	orrs	r3, r2
 8001526:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	d114      	bne.n	8001560 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001544:	f023 0302 	bic.w	r3, r3, #2
 8001548:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7e1b      	ldrb	r3, [r3, #24]
 800154e:	039a      	lsls	r2, r3, #14
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4313      	orrs	r3, r2
 800155a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800155c:	4313      	orrs	r3, r2
 800155e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_ADC_Init+0x3f0>)
 8001568:	4013      	ands	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001570:	430b      	orrs	r3, r1
 8001572:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d10c      	bne.n	8001596 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f023 010f 	bic.w	r1, r3, #15
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
 8001594:	e007      	b.n	80015a6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 020f 	bic.w	r2, r2, #15
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f023 0303 	bic.w	r3, r3, #3
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
 80015bc:	e00a      	b.n	80015d4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f023 0312 	bic.w	r3, r3, #18
 80015c6:	f043 0210 	orr.w	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3768      	adds	r7, #104	; 0x68
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	fff0c007 	.word	0xfff0c007

080015e4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 80f9 	bne.w	80017f2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_ADC_Start+0x2a>
 800160a:	2302      	movs	r3, #2
 800160c:	e0f4      	b.n	80017f8 <HAL_ADC_Start+0x214>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fde6 	bl	80021e8 <ADC_Enable>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 80e0 	bne.w	80017e8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001644:	d004      	beq.n	8001650 <HAL_ADC_Start+0x6c>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6d      	ldr	r2, [pc, #436]	; (8001800 <HAL_ADC_Start+0x21c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d106      	bne.n	800165e <HAL_ADC_Start+0x7a>
 8001650:	4b6c      	ldr	r3, [pc, #432]	; (8001804 <HAL_ADC_Start+0x220>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2b00      	cmp	r3, #0
 800165a:	d010      	beq.n	800167e <HAL_ADC_Start+0x9a>
 800165c:	e005      	b.n	800166a <HAL_ADC_Start+0x86>
 800165e:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_ADC_Start+0x224>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_ADC_Start+0x9a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001672:	d004      	beq.n	800167e <HAL_ADC_Start+0x9a>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a64      	ldr	r2, [pc, #400]	; (800180c <HAL_ADC_Start+0x228>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d115      	bne.n	80016aa <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d036      	beq.n	8001706 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016a8:	e02d      	b.n	8001706 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016be:	d004      	beq.n	80016ca <HAL_ADC_Start+0xe6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a4e      	ldr	r2, [pc, #312]	; (8001800 <HAL_ADC_Start+0x21c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10a      	bne.n	80016e0 <HAL_ADC_Start+0xfc>
 80016ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	e008      	b.n	80016f2 <HAL_ADC_Start+0x10e>
 80016e0:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_ADC_Start+0x228>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001712:	d106      	bne.n	8001722 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f023 0206 	bic.w	r2, r3, #6
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	645a      	str	r2, [r3, #68]	; 0x44
 8001720:	e002      	b.n	8001728 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	221c      	movs	r2, #28
 8001736:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001740:	d004      	beq.n	800174c <HAL_ADC_Start+0x168>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <HAL_ADC_Start+0x21c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d106      	bne.n	800175a <HAL_ADC_Start+0x176>
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_ADC_Start+0x220>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2b00      	cmp	r3, #0
 8001756:	d03e      	beq.n	80017d6 <HAL_ADC_Start+0x1f2>
 8001758:	e005      	b.n	8001766 <HAL_ADC_Start+0x182>
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_ADC_Start+0x224>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2b00      	cmp	r3, #0
 8001764:	d037      	beq.n	80017d6 <HAL_ADC_Start+0x1f2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176e:	d004      	beq.n	800177a <HAL_ADC_Start+0x196>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <HAL_ADC_Start+0x21c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d106      	bne.n	8001788 <HAL_ADC_Start+0x1a4>
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_ADC_Start+0x220>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2b05      	cmp	r3, #5
 8001784:	d027      	beq.n	80017d6 <HAL_ADC_Start+0x1f2>
 8001786:	e005      	b.n	8001794 <HAL_ADC_Start+0x1b0>
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_ADC_Start+0x224>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	2b05      	cmp	r3, #5
 8001792:	d020      	beq.n	80017d6 <HAL_ADC_Start+0x1f2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800179c:	d004      	beq.n	80017a8 <HAL_ADC_Start+0x1c4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <HAL_ADC_Start+0x21c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d106      	bne.n	80017b6 <HAL_ADC_Start+0x1d2>
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_ADC_Start+0x220>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d010      	beq.n	80017d6 <HAL_ADC_Start+0x1f2>
 80017b4:	e005      	b.n	80017c2 <HAL_ADC_Start+0x1de>
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_ADC_Start+0x224>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	2b09      	cmp	r3, #9
 80017c0:	d009      	beq.n	80017d6 <HAL_ADC_Start+0x1f2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ca:	d004      	beq.n	80017d6 <HAL_ADC_Start+0x1f2>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_ADC_Start+0x228>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10f      	bne.n	80017f6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0204 	orr.w	r2, r2, #4
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	e006      	b.n	80017f6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017f0:	e001      	b.n	80017f6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017f2:	2302      	movs	r3, #2
 80017f4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	50000100 	.word	0x50000100
 8001804:	50000300 	.word	0x50000300
 8001808:	50000700 	.word	0x50000700
 800180c:	50000400 	.word	0x50000400

08001810 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b08      	cmp	r3, #8
 8001824:	d102      	bne.n	800182c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001826:	2308      	movs	r3, #8
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e03a      	b.n	80018a2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001834:	d004      	beq.n	8001840 <HAL_ADC_PollForConversion+0x30>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a72      	ldr	r2, [pc, #456]	; (8001a04 <HAL_ADC_PollForConversion+0x1f4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_ADC_PollForConversion+0x34>
 8001840:	4b71      	ldr	r3, [pc, #452]	; (8001a08 <HAL_ADC_PollForConversion+0x1f8>)
 8001842:	e000      	b.n	8001846 <HAL_ADC_PollForConversion+0x36>
 8001844:	4b71      	ldr	r3, [pc, #452]	; (8001a0c <HAL_ADC_PollForConversion+0x1fc>)
 8001846:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	2b00      	cmp	r3, #0
 8001852:	d112      	bne.n	800187a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d11d      	bne.n	800189e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f043 0220 	orr.w	r2, r3, #32
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0bf      	b.n	80019fa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f043 0220 	orr.w	r2, r3, #32
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0ad      	b.n	80019fa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800189e:	230c      	movs	r3, #12
 80018a0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018aa:	d004      	beq.n	80018b6 <HAL_ADC_PollForConversion+0xa6>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a54      	ldr	r2, [pc, #336]	; (8001a04 <HAL_ADC_PollForConversion+0x1f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d106      	bne.n	80018c4 <HAL_ADC_PollForConversion+0xb4>
 80018b6:	4b54      	ldr	r3, [pc, #336]	; (8001a08 <HAL_ADC_PollForConversion+0x1f8>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d010      	beq.n	80018e4 <HAL_ADC_PollForConversion+0xd4>
 80018c2:	e005      	b.n	80018d0 <HAL_ADC_PollForConversion+0xc0>
 80018c4:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <HAL_ADC_PollForConversion+0x1fc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <HAL_ADC_PollForConversion+0xd4>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d8:	d004      	beq.n	80018e4 <HAL_ADC_PollForConversion+0xd4>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_ADC_PollForConversion+0x200>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d104      	bne.n	80018ee <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e00f      	b.n	800190e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f6:	d004      	beq.n	8001902 <HAL_ADC_PollForConversion+0xf2>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a41      	ldr	r2, [pc, #260]	; (8001a04 <HAL_ADC_PollForConversion+0x1f4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d102      	bne.n	8001908 <HAL_ADC_PollForConversion+0xf8>
 8001902:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001906:	e000      	b.n	800190a <HAL_ADC_PollForConversion+0xfa>
 8001908:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_ADC_PollForConversion+0x200>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800190e:	f7ff fc3f 	bl	8001190 <HAL_GetTick>
 8001912:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001914:	e021      	b.n	800195a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d01d      	beq.n	800195a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <HAL_ADC_PollForConversion+0x124>
 8001924:	f7ff fc34 	bl	8001190 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d212      	bcs.n	800195a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10b      	bne.n	800195a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f043 0204 	orr.w	r2, r3, #4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04f      	b.n	80019fa <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0d6      	beq.n	8001916 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800197e:	2b00      	cmp	r3, #0
 8001980:	d131      	bne.n	80019e6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001988:	2b00      	cmp	r3, #0
 800198a:	d12c      	bne.n	80019e6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b08      	cmp	r3, #8
 8001998:	d125      	bne.n	80019e6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d112      	bne.n	80019ce <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d112      	bne.n	80019e6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40
 80019cc:	e00b      	b.n	80019e6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f043 0220 	orr.w	r2, r3, #32
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	50000100 	.word	0x50000100
 8001a08:	50000300 	.word	0x50000300
 8001a0c:	50000700 	.word	0x50000700
 8001a10:	50000400 	.word	0x50000400

08001a14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b09b      	sub	sp, #108	; 0x6c
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x22>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e2c8      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x5b4>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 82ac 	bne.w	8001fc2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d81c      	bhi.n	8001aac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	461a      	mov	r2, r3
 8001a86:	231f      	movs	r3, #31
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4019      	ands	r1, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aaa:	e063      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	d81e      	bhi.n	8001af2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	3b1e      	subs	r3, #30
 8001ac8:	221f      	movs	r2, #31
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4019      	ands	r1, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	3b1e      	subs	r3, #30
 8001ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
 8001af0:	e040      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b0e      	cmp	r3, #14
 8001af8:	d81e      	bhi.n	8001b38 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	3b3c      	subs	r3, #60	; 0x3c
 8001b0e:	221f      	movs	r2, #31
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4019      	ands	r1, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	3b3c      	subs	r3, #60	; 0x3c
 8001b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
 8001b36:	e01d      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	3b5a      	subs	r3, #90	; 0x5a
 8001b4c:	221f      	movs	r2, #31
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	4019      	ands	r1, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	3b5a      	subs	r3, #90	; 0x5a
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 80e5 	bne.w	8001d4e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	d91c      	bls.n	8001bc6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6999      	ldr	r1, [r3, #24]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b1e      	subs	r3, #30
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	e019      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6959      	ldr	r1, [r3, #20]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4019      	ands	r1, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6898      	ldr	r0, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d84f      	bhi.n	8001cbc <HAL_ADC_ConfigChannel+0x28c>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c57 	.word	0x08001c57
 8001c2c:	08001c79 	.word	0x08001c79
 8001c30:	08001c9b 	.word	0x08001c9b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c3a:	4b99      	ldr	r3, [pc, #612]	; (8001ea0 <HAL_ADC_ConfigChannel+0x470>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	0691      	lsls	r1, r2, #26
 8001c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c46:	430a      	orrs	r2, r1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c52:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c54:	e07b      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c5c:	4b90      	ldr	r3, [pc, #576]	; (8001ea0 <HAL_ADC_ConfigChannel+0x470>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	0691      	lsls	r1, r2, #26
 8001c66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c74:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c76:	e06a      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_ADC_ConfigChannel+0x470>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	0691      	lsls	r1, r2, #26
 8001c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c96:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c98:	e059      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ca0:	4b7f      	ldr	r3, [pc, #508]	; (8001ea0 <HAL_ADC_ConfigChannel+0x470>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	0691      	lsls	r1, r2, #26
 8001caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cac:	430a      	orrs	r2, r1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cb8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cba:	e048      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d107      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cde:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	069b      	lsls	r3, r3, #26
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d02:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	069b      	lsls	r3, r3, #26
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d26:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	069b      	lsls	r3, r3, #26
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d107      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d4a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d4c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x33e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x33e>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x340>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 8131 	bne.w	8001fd8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d00f      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43da      	mvns	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	400a      	ands	r2, r1
 8001d98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d9c:	e049      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2201      	movs	r2, #1
 8001dac:	409a      	lsls	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d91c      	bls.n	8001dfa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6999      	ldr	r1, [r3, #24]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1b      	subs	r3, #27
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4019      	ands	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6898      	ldr	r0, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	3b1b      	subs	r3, #27
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	e01b      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6959      	ldr	r1, [r3, #20]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4019      	ands	r1, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6898      	ldr	r0, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e3a:	d004      	beq.n	8001e46 <HAL_ADC_ConfigChannel+0x416>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_ADC_ConfigChannel+0x474>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x41a>
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_ADC_ConfigChannel+0x478>)
 8001e48:	e000      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x41c>
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_ADC_ConfigChannel+0x47c>)
 8001e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d105      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d015      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e66:	2b11      	cmp	r3, #17
 8001e68:	d105      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	f040 80ac 	bne.w	8001fd8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f040 80a5 	bne.w	8001fd8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e96:	d10b      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x480>
 8001e98:	4b02      	ldr	r3, [pc, #8]	; (8001ea4 <HAL_ADC_ConfigChannel+0x474>)
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e023      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x4b6>
 8001e9e:	bf00      	nop
 8001ea0:	83fff000 	.word	0x83fff000
 8001ea4:	50000100 	.word	0x50000100
 8001ea8:	50000300 	.word	0x50000300
 8001eac:	50000700 	.word	0x50000700
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	; (8001ff0 <HAL_ADC_ConfigChannel+0x5c0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d103      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x492>
 8001eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e011      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x4b6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	; (8001ff4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x4a2>
 8001ecc:	4b4a      	ldr	r3, [pc, #296]	; (8001ff8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e009      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x4b6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a48      	ldr	r2, [pc, #288]	; (8001ff8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d102      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x4b2>
 8001edc:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e001      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x4b6>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d108      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x4d6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x4d6>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x4d8>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d150      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x4fe>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x4fe>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x500>
 8001f2e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d13c      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d11d      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x548>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f44:	d118      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f50:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_ADC_ConfigChannel+0x5cc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <HAL_ADC_ConfigChannel+0x5d0>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	0c9a      	lsrs	r2, r3, #18
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f9      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f76:	e02e      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b11      	cmp	r3, #17
 8001f7e:	d10b      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x568>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f88:	d106      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f94:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f96:	e01e      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b12      	cmp	r3, #18
 8001f9e:	d11a      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001faa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fac:	e013      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f043 0220 	orr.w	r2, r3, #32
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fc0:	e00a      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f043 0220 	orr.w	r2, r3, #32
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fd4:	e000      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fd6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fe0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	376c      	adds	r7, #108	; 0x6c
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	50000100 	.word	0x50000100
 8001ff4:	50000400 	.word	0x50000400
 8001ff8:	50000500 	.word	0x50000500
 8001ffc:	200000c0 	.word	0x200000c0
 8002000:	431bde83 	.word	0x431bde83

08002004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002004:	b480      	push	{r7}
 8002006:	b099      	sub	sp, #100	; 0x64
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800201c:	d102      	bne.n	8002024 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	e01a      	b.n	800205a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d103      	bne.n	8002036 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800202e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	e011      	b.n	800205a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d102      	bne.n	8002046 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	e009      	b.n	800205a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a64      	ldr	r2, [pc, #400]	; (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d102      	bne.n	8002056 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002050:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	e001      	b.n	800205a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b0      	b.n	80021c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800206e:	2302      	movs	r3, #2
 8002070:	e0a9      	b.n	80021c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 808d 	bne.w	80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8086 	bne.w	80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a0:	d004      	beq.n	80020ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a4b      	ldr	r2, [pc, #300]	; (80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80020ac:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80020ae:	e000      	b.n	80020b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80020b0:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80020b2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d040      	beq.n	800213e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ce:	035b      	lsls	r3, r3, #13
 80020d0:	430b      	orrs	r3, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d15c      	bne.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800211a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d14b      	bne.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002128:	f023 030f 	bic.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	6811      	ldr	r1, [r2, #0]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	6892      	ldr	r2, [r2, #8]
 8002134:	430a      	orrs	r2, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800213c:	e03c      	b.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800213e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002148:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d108      	bne.n	800216a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d123      	bne.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800218c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d112      	bne.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800219a:	f023 030f 	bic.w	r3, r3, #15
 800219e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021a0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021a2:	e009      	b.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f043 0220 	orr.w	r2, r3, #32
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80021b6:	e000      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021b8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80021c6:	4618      	mov	r0, r3
 80021c8:	3764      	adds	r7, #100	; 0x64
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	50000100 	.word	0x50000100
 80021d8:	50000400 	.word	0x50000400
 80021dc:	50000500 	.word	0x50000500
 80021e0:	50000300 	.word	0x50000300
 80021e4:	50000700 	.word	0x50000700

080021e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <ADC_Enable+0x2c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <ADC_Enable+0x2c>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <ADC_Enable+0x2e>
 8002214:	2300      	movs	r3, #0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d143      	bne.n	80022a2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <ADC_Enable+0xc4>)
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0210 	orr.w	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e02f      	b.n	80022a4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002254:	f7fe ff9c 	bl	8001190 <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800225a:	e01b      	b.n	8002294 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800225c:	f7fe ff98 	bl	8001190 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d914      	bls.n	8002294 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d00d      	beq.n	8002294 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f043 0210 	orr.w	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e007      	b.n	80022a4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d1dc      	bne.n	800225c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	8000003f 	.word	0x8000003f

080022b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d108      	bne.n	80022dc <ADC_Disable+0x2c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <ADC_Disable+0x2c>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <ADC_Disable+0x2e>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d047      	beq.n	8002372 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030d 	and.w	r3, r3, #13
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10f      	bne.n	8002310 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0202 	orr.w	r2, r2, #2
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2203      	movs	r2, #3
 8002306:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002308:	f7fe ff42 	bl	8001190 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800230e:	e029      	b.n	8002364 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f043 0210 	orr.w	r2, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e023      	b.n	8002374 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800232c:	f7fe ff30 	bl	8001190 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d914      	bls.n	8002364 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10d      	bne.n	8002364 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f043 0210 	orr.w	r2, r3, #16
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d0dc      	beq.n	800232c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	; (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	; (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
         );
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff8e 	bl	80023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	; (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff47 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff5c 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff8e 	bl	8002434 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5d 	bl	80023e0 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffb0 	bl	800249c <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002556:	e160      	b.n	800281a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8152 	beq.w	8002814 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d005      	beq.n	8002588 <HAL_GPIO_Init+0x40>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d130      	bne.n	80025ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025be:	2201      	movs	r2, #1
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0201 	and.w	r2, r3, #1
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d017      	beq.n	8002626 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d123      	bne.n	800267a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	6939      	ldr	r1, [r7, #16]
 8002676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0203 	and.w	r2, r3, #3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80ac 	beq.w	8002814 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_GPIO_Init+0x2f0>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <HAL_GPIO_Init+0x2f0>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_GPIO_Init+0x2f0>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026d4:	4a59      	ldr	r2, [pc, #356]	; (800283c <HAL_GPIO_Init+0x2f4>)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026fe:	d025      	beq.n	800274c <HAL_GPIO_Init+0x204>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a4f      	ldr	r2, [pc, #316]	; (8002840 <HAL_GPIO_Init+0x2f8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d01f      	beq.n	8002748 <HAL_GPIO_Init+0x200>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a4e      	ldr	r2, [pc, #312]	; (8002844 <HAL_GPIO_Init+0x2fc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d019      	beq.n	8002744 <HAL_GPIO_Init+0x1fc>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <HAL_GPIO_Init+0x300>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_GPIO_Init+0x1f8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a4c      	ldr	r2, [pc, #304]	; (800284c <HAL_GPIO_Init+0x304>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00d      	beq.n	800273c <HAL_GPIO_Init+0x1f4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_GPIO_Init+0x308>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <HAL_GPIO_Init+0x1f0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_GPIO_Init+0x30c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_GPIO_Init+0x1ec>
 8002730:	2306      	movs	r3, #6
 8002732:	e00c      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002734:	2307      	movs	r3, #7
 8002736:	e00a      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002738:	2305      	movs	r3, #5
 800273a:	e008      	b.n	800274e <HAL_GPIO_Init+0x206>
 800273c:	2304      	movs	r3, #4
 800273e:	e006      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002740:	2303      	movs	r3, #3
 8002742:	e004      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002744:	2302      	movs	r3, #2
 8002746:	e002      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_GPIO_Init+0x206>
 800274c:	2300      	movs	r3, #0
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	f002 0203 	and.w	r2, r2, #3
 8002754:	0092      	lsls	r2, r2, #2
 8002756:	4093      	lsls	r3, r2
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800275e:	4937      	ldr	r1, [pc, #220]	; (800283c <HAL_GPIO_Init+0x2f4>)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_GPIO_Init+0x310>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002790:	4a31      	ldr	r2, [pc, #196]	; (8002858 <HAL_GPIO_Init+0x310>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_GPIO_Init+0x310>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027ba:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_GPIO_Init+0x310>)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_GPIO_Init+0x310>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_GPIO_Init+0x310>)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_GPIO_Init+0x310>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_GPIO_Init+0x310>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f ae97 	bne.w	8002558 <HAL_GPIO_Init+0x10>
  }
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000
 8002840:	48000400 	.word	0x48000400
 8002844:	48000800 	.word	0x48000800
 8002848:	48000c00 	.word	0x48000c00
 800284c:	48001000 	.word	0x48001000
 8002850:	48001400 	.word	0x48001400
 8002854:	48001800 	.word	0x48001800
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002878:	e002      	b.n	8002880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002892:	af00      	add	r7, sp, #0
 8002894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002898:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800289c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f001 b83a 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 816f 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028c8:	4bb5      	ldr	r3, [pc, #724]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d00c      	beq.n	80028ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d4:	4bb2      	ldr	r3, [pc, #712]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d15c      	bne.n	800299a <HAL_RCC_OscConfig+0x10e>
 80028e0:	4baf      	ldr	r3, [pc, #700]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d155      	bne.n	800299a <HAL_RCC_OscConfig+0x10e>
 80028ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002902:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d102      	bne.n	8002920 <HAL_RCC_OscConfig+0x94>
 800291a:	4ba1      	ldr	r3, [pc, #644]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e015      	b.n	800294c <HAL_RCC_OscConfig+0xc0>
 8002920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002924:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002938:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800293c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002948:	4b95      	ldr	r3, [pc, #596]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002950:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002954:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002958:	fa92 f2a2 	rbit	r2, r2
 800295c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002960:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002964:	fab2 f282 	clz	r2, r2
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f042 0220 	orr.w	r2, r2, #32
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f002 021f 	and.w	r2, r2, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f202 	lsl.w	r2, r1, r2
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8111 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x318>
 8002982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002986:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 8108 	bne.w	8002ba4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f000 bfc6 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x12e>
 80029ac:	4b7c      	ldr	r3, [pc, #496]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a7b      	ldr	r2, [pc, #492]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	e036      	b.n	8002a28 <HAL_RCC_OscConfig+0x19c>
 80029ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x158>
 80029ca:	4b75      	ldr	r3, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a74      	ldr	r2, [pc, #464]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80029d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b72      	ldr	r3, [pc, #456]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a71      	ldr	r2, [pc, #452]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80029dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e021      	b.n	8002a28 <HAL_RCC_OscConfig+0x19c>
 80029e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x184>
 80029f6:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a69      	ldr	r2, [pc, #420]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0x19c>
 8002a10:	4b63      	ldr	r3, [pc, #396]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a62      	ldr	r2, [pc, #392]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b60      	ldr	r3, [pc, #384]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5f      	ldr	r2, [pc, #380]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d059      	beq.n	8002aec <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fbaa 	bl	8001190 <HAL_GetTick>
 8002a3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a42:	f7fe fba5 	bl	8001190 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d902      	bls.n	8002a58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	f000 bf67 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002a6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_OscConfig+0x1fe>
 8002a84:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x22a>
 8002a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002aa6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aba:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002abe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002ac2:	fa92 f2a2 	rbit	r2, r2
 8002ac6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002aca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f002 021f 	and.w	r2, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ab      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1b6>
 8002aea:	e05c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fb50 	bl	8001190 <HAL_GetTick>
 8002af0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af6:	f7fe fb4b 	bl	8001190 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d902      	bls.n	8002b0c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	f000 bf0d 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>
 8002b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b10:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002b20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d102      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2b2>
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x2de>
 8002b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b42:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b56:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_RCC_OscConfig+0x314>)
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b6e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002b72:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002b7e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b82:	fab2 f282 	clz	r2, r2
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f042 0220 	orr.w	r2, r2, #32
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f002 021f 	and.w	r2, r2, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1ab      	bne.n	8002af6 <HAL_RCC_OscConfig+0x26a>
 8002b9e:	e002      	b.n	8002ba6 <HAL_RCC_OscConfig+0x31a>
 8002ba0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002baa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 817f 	beq.w	8002eba <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bbc:	4ba7      	ldr	r3, [pc, #668]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bc8:	4ba4      	ldr	r3, [pc, #656]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d173      	bne.n	8002cbc <HAL_RCC_OscConfig+0x430>
 8002bd4:	4ba1      	ldr	r3, [pc, #644]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	d16c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x430>
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002bf4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_OscConfig+0x386>
 8002c0c:	4b93      	ldr	r3, [pc, #588]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	e013      	b.n	8002c3a <HAL_RCC_OscConfig+0x3ae>
 8002c12:	2302      	movs	r3, #2
 8002c14:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002c24:	2302      	movs	r3, #2
 8002c26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c2a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c36:	4b89      	ldr	r3, [pc, #548]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002c40:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002c44:	fa92 f2a2 	rbit	r2, r2
 8002c48:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002c4c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c50:	fab2 f282 	clz	r2, r2
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f042 0220 	orr.w	r2, r2, #32
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	f002 021f 	and.w	r2, r2, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCC_OscConfig+0x3f6>
 8002c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d002      	beq.n	8002c82 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f000 be52 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	21f8      	movs	r1, #248	; 0xf8
 8002c98:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002ca0:	fa91 f1a1 	rbit	r1, r1
 8002ca4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002ca8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cac:	fab1 f181 	clz	r1, r1
 8002cb0:	b2c9      	uxtb	r1, r1
 8002cb2:	408b      	lsls	r3, r1
 8002cb4:	4969      	ldr	r1, [pc, #420]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e0fe      	b.n	8002eba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8088 	beq.w	8002dde <HAL_RCC_OscConfig+0x552>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ce0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fa49 	bl	8001190 <HAL_GetTick>
 8002cfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe fa44 	bl	8001190 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d902      	bls.n	8002d1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	f000 be06 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002d2c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d102      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4be>
 8002d44:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	e013      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e6>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d62:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2202      	movs	r2, #2
 8002d74:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002d78:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002d7c:	fa92 f2a2 	rbit	r2, r2
 8002d80:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002d84:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d88:	fab2 f282 	clz	r2, r2
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f002 021f 	and.w	r2, r2, #31
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0af      	beq.n	8002d04 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	21f8      	movs	r1, #248	; 0xf8
 8002dba:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002dc2:	fa91 f1a1 	rbit	r1, r1
 8002dc6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002dca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dce:	fab1 f181 	clz	r1, r1
 8002dd2:	b2c9      	uxtb	r1, r1
 8002dd4:	408b      	lsls	r3, r1
 8002dd6:	4921      	ldr	r1, [pc, #132]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e06d      	b.n	8002eba <HAL_RCC_OscConfig+0x62e>
 8002dde:	2301      	movs	r3, #1
 8002de0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002df0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	461a      	mov	r2, r3
 8002e06:	2300      	movs	r3, #0
 8002e08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe f9c1 	bl	8001190 <HAL_GetTick>
 8002e0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e14:	f7fe f9bc 	bl	8001190 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d902      	bls.n	8002e2a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	f000 bd7e 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002e3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5d4>
 8002e54:	4b01      	ldr	r3, [pc, #4]	; (8002e5c <HAL_RCC_OscConfig+0x5d0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	e016      	b.n	8002e88 <HAL_RCC_OscConfig+0x5fc>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e72:	2302      	movs	r3, #2
 8002e74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e84:	4bbf      	ldr	r3, [pc, #764]	; (8003184 <HAL_RCC_OscConfig+0x8f8>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002e8e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002e92:	fa92 f2a2 	rbit	r2, r2
 8002e96:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002e9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e9e:	fab2 f282 	clz	r2, r2
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f042 0220 	orr.w	r2, r2, #32
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f002 021f 	and.w	r2, r2, #31
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1ac      	bne.n	8002e14 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8113 	beq.w	80030f6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d07c      	beq.n	8002fda <HAL_RCC_OscConfig+0x74e>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002ef2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	4ba2      	ldr	r3, [pc, #648]	; (8003188 <HAL_RCC_OscConfig+0x8fc>)
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	461a      	mov	r2, r3
 8002f06:	2301      	movs	r3, #1
 8002f08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe f941 	bl	8001190 <HAL_GetTick>
 8002f0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe f93c 	bl	8001190 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	f000 bcfe 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f34:	fa93 f2a3 	rbit	r2, r3
 8002f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f6e:	2202      	movs	r2, #2
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fa93 f2a3 	rbit	r2, r3
 8002f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b7e      	ldr	r3, [pc, #504]	; (8003184 <HAL_RCC_OscConfig+0x8f8>)
 8002f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f96:	2102      	movs	r1, #2
 8002f98:	6019      	str	r1, [r3, #0]
 8002f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fa93 f1a3 	rbit	r1, r3
 8002fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fb0:	6019      	str	r1, [r3, #0]
  return result;
 8002fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d09d      	beq.n	8002f14 <HAL_RCC_OscConfig+0x688>
 8002fd8:	e08d      	b.n	80030f6 <HAL_RCC_OscConfig+0x86a>
 8002fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fde:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ffc:	601a      	str	r2, [r3, #0]
  return result;
 8002ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003002:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003006:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <HAL_RCC_OscConfig+0x8fc>)
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	461a      	mov	r2, r3
 8003018:	2300      	movs	r3, #0
 800301a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe f8b8 	bl	8001190 <HAL_GetTick>
 8003020:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003026:	f7fe f8b3 	bl	8001190 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	f000 bc75 	b.w	8003926 <HAL_RCC_OscConfig+0x109a>
 800303c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003040:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003044:	2202      	movs	r2, #2
 8003046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800304c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	fa93 f2a3 	rbit	r2, r3
 8003056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003068:	2202      	movs	r2, #2
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003088:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800308c:	2202      	movs	r2, #2
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003094:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_OscConfig+0x8f8>)
 80030aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030b4:	2102      	movs	r1, #2
 80030b6:	6019      	str	r1, [r3, #0]
 80030b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f1a3 	rbit	r1, r3
 80030c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030ce:	6019      	str	r1, [r3, #0]
  return result;
 80030d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d197      	bne.n	8003026 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 81a5 	beq.w	8003456 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <HAL_RCC_OscConfig+0x8f8>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d116      	bne.n	800314c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_OscConfig+0x8f8>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4a18      	ldr	r2, [pc, #96]	; (8003184 <HAL_RCC_OscConfig+0x8f8>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	61d3      	str	r3, [r2, #28]
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_RCC_OscConfig+0x8f8>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003140:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003144:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x900>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d121      	bne.n	800319c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x900>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0b      	ldr	r2, [pc, #44]	; (800318c <HAL_RCC_OscConfig+0x900>)
 800315e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003162:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003164:	f7fe f814 	bl	8001190 <HAL_GetTick>
 8003168:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e010      	b.n	8003190 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7fe f80f 	bl	8001190 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d908      	bls.n	8003190 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e3d1      	b.n	8003926 <HAL_RCC_OscConfig+0x109a>
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	10908120 	.word	0x10908120
 800318c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b8d      	ldr	r3, [pc, #564]	; (80033c8 <HAL_RCC_OscConfig+0xb3c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0e8      	beq.n	800316e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x92e>
 80031ac:	4b87      	ldr	r3, [pc, #540]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a86      	ldr	r2, [pc, #536]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e035      	b.n	8003226 <HAL_RCC_OscConfig+0x99a>
 80031ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x958>
 80031ca:	4b80      	ldr	r3, [pc, #512]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a7f      	ldr	r2, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6213      	str	r3, [r2, #32]
 80031d6:	4b7d      	ldr	r3, [pc, #500]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a7c      	ldr	r2, [pc, #496]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6213      	str	r3, [r2, #32]
 80031e2:	e020      	b.n	8003226 <HAL_RCC_OscConfig+0x99a>
 80031e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d10c      	bne.n	800320e <HAL_RCC_OscConfig+0x982>
 80031f4:	4b75      	ldr	r3, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a74      	ldr	r2, [pc, #464]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	4b72      	ldr	r3, [pc, #456]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a71      	ldr	r2, [pc, #452]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e00b      	b.n	8003226 <HAL_RCC_OscConfig+0x99a>
 800320e:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6213      	str	r3, [r2, #32]
 800321a:	4b6c      	ldr	r3, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a6b      	ldr	r2, [pc, #428]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8081 	beq.w	800333a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7fd ffaa 	bl	8001190 <HAL_GetTick>
 800323c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fd ffa5 	bl	8001190 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e365      	b.n	8003926 <HAL_RCC_OscConfig+0x109a>
 800325a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003262:	2202      	movs	r2, #2
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003278:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003282:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003286:	2202      	movs	r2, #2
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032a0:	601a      	str	r2, [r3, #0]
  return result;
 80032a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d102      	bne.n	80032c6 <HAL_RCC_OscConfig+0xa3a>
 80032c0:	4b42      	ldr	r3, [pc, #264]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	e013      	b.n	80032ee <HAL_RCC_OscConfig+0xa62>
 80032c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032ce:	2202      	movs	r2, #2
 80032d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80032f6:	2102      	movs	r1, #2
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	fa92 f1a2 	rbit	r1, r2
 8003308:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800330c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003310:	6011      	str	r1, [r2, #0]
  return result;
 8003312:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003316:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f002 021f 	and.w	r2, r2, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d084      	beq.n	8003242 <HAL_RCC_OscConfig+0x9b6>
 8003338:	e083      	b.n	8003442 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fd ff29 	bl	8001190 <HAL_GetTick>
 800333e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003344:	f7fd ff24 	bl	8001190 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e2e4      	b.n	8003926 <HAL_RCC_OscConfig+0x109a>
 800335c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003360:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003364:	2202      	movs	r2, #2
 8003366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800336c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	fa93 f2a3 	rbit	r2, r3
 8003376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003384:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003388:	2202      	movs	r2, #2
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003390:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f2a3 	rbit	r2, r3
 800339a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033a2:	601a      	str	r2, [r3, #0]
  return result;
 80033a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d106      	bne.n	80033d0 <HAL_RCC_OscConfig+0xb44>
 80033c2:	4b02      	ldr	r3, [pc, #8]	; (80033cc <HAL_RCC_OscConfig+0xb40>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	e017      	b.n	80033f8 <HAL_RCC_OscConfig+0xb6c>
 80033c8:	40007000 	.word	0x40007000
 80033cc:	40021000 	.word	0x40021000
 80033d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80033d8:	2202      	movs	r2, #2
 80033da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	fa93 f2a3 	rbit	r2, r3
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	4bb3      	ldr	r3, [pc, #716]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003400:	2102      	movs	r1, #2
 8003402:	6011      	str	r1, [r2, #0]
 8003404:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003408:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	fa92 f1a2 	rbit	r1, r2
 8003412:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003416:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800341a:	6011      	str	r1, [r2, #0]
  return result;
 800341c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003420:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d180      	bne.n	8003344 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003442:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003446:	2b01      	cmp	r3, #1
 8003448:	d105      	bne.n	8003456 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344a:	4b9e      	ldr	r3, [pc, #632]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4a9d      	ldr	r2, [pc, #628]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003454:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 825e 	beq.w	8003924 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003468:	4b96      	ldr	r3, [pc, #600]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	f000 821f 	beq.w	80038b4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b02      	cmp	r3, #2
 8003484:	f040 8170 	bne.w	8003768 <HAL_RCC_OscConfig+0xedc>
 8003488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	fa93 f2a3 	rbit	r2, r3
 80034a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034ac:	601a      	str	r2, [r3, #0]
  return result;
 80034ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034b6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	461a      	mov	r2, r3
 80034ca:	2300      	movs	r3, #0
 80034cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fd fe5f 	bl	8001190 <HAL_GetTick>
 80034d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	e009      	b.n	80034ec <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fd fe5a 	bl	8001190 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e21c      	b.n	8003926 <HAL_RCC_OscConfig+0x109a>
 80034ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003510:	601a      	str	r2, [r3, #0]
  return result;
 8003512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003516:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800351a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d102      	bne.n	8003536 <HAL_RCC_OscConfig+0xcaa>
 8003530:	4b64      	ldr	r3, [pc, #400]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	e027      	b.n	8003586 <HAL_RCC_OscConfig+0xcfa>
 8003536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800353a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800353e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003548:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003556:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003560:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800356e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800358a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800358e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003592:	6011      	str	r1, [r2, #0]
 8003594:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003598:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	fa92 f1a2 	rbit	r1, r2
 80035a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035a6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035aa:	6011      	str	r1, [r2, #0]
  return result;
 80035ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035b0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f042 0220 	orr.w	r2, r2, #32
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f002 021f 	and.w	r2, r2, #31
 80035c6:	2101      	movs	r1, #1
 80035c8:	fa01 f202 	lsl.w	r2, r1, r2
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d182      	bne.n	80034d8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d2:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	4937      	ldr	r1, [pc, #220]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 80035ec:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80035f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a19      	ldr	r1, [r3, #32]
 8003600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003604:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	430b      	orrs	r3, r1
 800360e:	492d      	ldr	r1, [pc, #180]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003618:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800361c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003626:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fa93 f2a3 	rbit	r2, r3
 8003630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003634:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003638:	601a      	str	r2, [r3, #0]
  return result;
 800363a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800363e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003642:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800364e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	461a      	mov	r2, r3
 8003656:	2301      	movs	r3, #1
 8003658:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fd fd99 	bl	8001190 <HAL_GetTick>
 800365e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003662:	e009      	b.n	8003678 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fd fd94 	bl	8001190 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e156      	b.n	8003926 <HAL_RCC_OscConfig+0x109a>
 8003678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800367c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800368a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003698:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800369c:	601a      	str	r2, [r3, #0]
  return result;
 800369e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d105      	bne.n	80036c8 <HAL_RCC_OscConfig+0xe3c>
 80036bc:	4b01      	ldr	r3, [pc, #4]	; (80036c4 <HAL_RCC_OscConfig+0xe38>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e02a      	b.n	8003718 <HAL_RCC_OscConfig+0xe8c>
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036da:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fa93 f2a3 	rbit	r2, r3
 80036e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003700:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	fa93 f2a3 	rbit	r2, r3
 800370a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	4b86      	ldr	r3, [pc, #536]	; (8003930 <HAL_RCC_OscConfig+0x10a4>)
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800371c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003720:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800372a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	fa92 f1a2 	rbit	r1, r2
 8003734:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003738:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800373c:	6011      	str	r1, [r2, #0]
  return result;
 800373e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003742:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0220 	orr.w	r2, r2, #32
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	f43f af7f 	beq.w	8003664 <HAL_RCC_OscConfig+0xdd8>
 8003766:	e0dd      	b.n	8003924 <HAL_RCC_OscConfig+0x1098>
 8003768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003788:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800378c:	601a      	str	r2, [r3, #0]
  return result;
 800378e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003792:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003796:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	461a      	mov	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fd fcef 	bl	8001190 <HAL_GetTick>
 80037b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b6:	e009      	b.n	80037cc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fd fcea 	bl	8001190 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0ac      	b.n	8003926 <HAL_RCC_OscConfig+0x109a>
 80037cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	fa93 f2a3 	rbit	r2, r3
 80037e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037f0:	601a      	str	r2, [r3, #0]
  return result;
 80037f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d102      	bne.n	8003816 <HAL_RCC_OscConfig+0xf8a>
 8003810:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_OscConfig+0x10a4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	e027      	b.n	8003866 <HAL_RCC_OscConfig+0xfda>
 8003816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800381a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800381e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003828:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fa93 f2a3 	rbit	r2, r3
 8003832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003836:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003840:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f2a3 	rbit	r2, r3
 8003858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	4b33      	ldr	r3, [pc, #204]	; (8003930 <HAL_RCC_OscConfig+0x10a4>)
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800386a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800386e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003872:	6011      	str	r1, [r2, #0]
 8003874:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003878:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	fa92 f1a2 	rbit	r1, r2
 8003882:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003886:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800388a:	6011      	str	r1, [r2, #0]
  return result;
 800388c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003890:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d182      	bne.n	80037b8 <HAL_RCC_OscConfig+0xf2c>
 80038b2:	e037      	b.n	8003924 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e02e      	b.n	8003926 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_OscConfig+0x10a4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80038d0:	4b17      	ldr	r3, [pc, #92]	; (8003930 <HAL_RCC_OscConfig+0x10a4>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038dc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80038e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d117      	bne.n	8003920 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80038f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038f4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003904:	429a      	cmp	r2, r3
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800390c:	f003 020f 	and.w	r2, r3, #15
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000

08003934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b09e      	sub	sp, #120	; 0x78
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e162      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b90      	ldr	r3, [pc, #576]	; (8003b90 <HAL_RCC_ClockConfig+0x25c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d910      	bls.n	800397c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b8d      	ldr	r3, [pc, #564]	; (8003b90 <HAL_RCC_ClockConfig+0x25c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 0207 	bic.w	r2, r3, #7
 8003962:	498b      	ldr	r1, [pc, #556]	; (8003b90 <HAL_RCC_ClockConfig+0x25c>)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b89      	ldr	r3, [pc, #548]	; (8003b90 <HAL_RCC_ClockConfig+0x25c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e14a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b82      	ldr	r3, [pc, #520]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	497f      	ldr	r1, [pc, #508]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80dc 	beq.w	8003b60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d13c      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xf6>
 80039b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <HAL_RCC_ClockConfig+0xa6>
 80039d4:	4b6f      	ldr	r3, [pc, #444]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	e00f      	b.n	80039fa <HAL_RCC_ClockConfig+0xc6>
 80039da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	667b      	str	r3, [r7, #100]	; 0x64
 80039e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ec:	663b      	str	r3, [r7, #96]	; 0x60
 80039ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f0:	fa93 f3a3 	rbit	r3, r3
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f6:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a02:	fa92 f2a2 	rbit	r2, r2
 8003a06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a0a:	fab2 f282 	clz	r2, r2
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	f042 0220 	orr.w	r2, r2, #32
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	f002 021f 	and.w	r2, r2, #31
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d17b      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0f3      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d13c      	bne.n	8003aac <HAL_RCC_ClockConfig+0x178>
 8003a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d102      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x128>
 8003a56:	4b4f      	ldr	r3, [pc, #316]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	e00f      	b.n	8003a7c <HAL_RCC_ClockConfig+0x148>
 8003a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a64:	fa93 f3a3 	rbit	r3, r3
 8003a68:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a78:	4b46      	ldr	r3, [pc, #280]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a80:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a84:	fa92 f2a2 	rbit	r2, r2
 8003a88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a8c:	fab2 f282 	clz	r2, r2
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	f042 0220 	orr.w	r2, r2, #32
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	f002 021f 	and.w	r2, r2, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d13a      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b2      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2de>
 8003aac:	2302      	movs	r3, #2
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d102      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x1a0>
 8003ace:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	e00d      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1bc>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2202      	movs	r2, #2
 8003af2:	61ba      	str	r2, [r7, #24]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	fa92 f2a2 	rbit	r2, r2
 8003afa:	617a      	str	r2, [r7, #20]
  return result;
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	fab2 f282 	clz	r2, r2
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	f042 0220 	orr.w	r2, r2, #32
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	f002 021f 	and.w	r2, r2, #31
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f202 	lsl.w	r2, r1, r2
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e079      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	491a      	ldr	r1, [pc, #104]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b30:	f7fd fb2e 	bl	8001190 <HAL_GetTick>
 8003b34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fd fb2a 	bl	8001190 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e061      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 020c 	and.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1eb      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x25c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d214      	bcs.n	8003b98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_RCC_ClockConfig+0x25c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 0207 	bic.w	r2, r3, #7
 8003b76:	4906      	ldr	r1, [pc, #24]	; (8003b90 <HAL_RCC_ClockConfig+0x25c>)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <HAL_RCC_ClockConfig+0x25c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e040      	b.n	8003c12 <HAL_RCC_ClockConfig+0x2de>
 8003b90:	40022000 	.word	0x40022000
 8003b94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCC_ClockConfig+0x2e8>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	491a      	ldr	r1, [pc, #104]	; (8003c1c <HAL_RCC_ClockConfig+0x2e8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_RCC_ClockConfig+0x2e8>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4912      	ldr	r1, [pc, #72]	; (8003c1c <HAL_RCC_ClockConfig+0x2e8>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bd6:	f000 f829 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bda:	4601      	mov	r1, r0
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <HAL_RCC_ClockConfig+0x2e8>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be4:	22f0      	movs	r2, #240	; 0xf0
 8003be6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	fa92 f2a2 	rbit	r2, r2
 8003bee:	60fa      	str	r2, [r7, #12]
  return result;
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	fab2 f282 	clz	r2, r2
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	40d3      	lsrs	r3, r2
 8003bfa:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x2ec>)
 8003bfc:	5cd3      	ldrb	r3, [r2, r3]
 8003bfe:	fa21 f303 	lsr.w	r3, r1, r3
 8003c02:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <HAL_RCC_ClockConfig+0x2f0>)
 8003c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <HAL_RCC_ClockConfig+0x2f4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fa7c 	bl	8001108 <HAL_InitTick>
  
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3778      	adds	r7, #120	; 0x78
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	08004a9c 	.word	0x08004a9c
 8003c24:	200000c0 	.word	0x200000c0
 8003c28:	200000c4 	.word	0x200000c4

08003c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d002      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0x30>
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d003      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x36>
 8003c5a:	e029      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c5e:	613b      	str	r3, [r7, #16]
      break;
 8003c60:	e029      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	0c9b      	lsrs	r3, r3, #18
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c7a:	5cd3      	ldrb	r3, [r2, r3]
 8003c7c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c88:	4a0f      	ldr	r2, [pc, #60]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e007      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c9a:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	613b      	str	r3, [r7, #16]
      break;
 8003cae:	e002      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cb2:	613b      	str	r3, [r7, #16]
      break;
 8003cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb6:	693b      	ldr	r3, [r7, #16]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	08004ab4 	.word	0x08004ab4
 8003cd0:	08004ac4 	.word	0x08004ac4

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	200000c0 	.word	0x200000c0

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003cf2:	f7ff ffef 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	fa92 f2a2 	rbit	r2, r2
 8003d0c:	603a      	str	r2, [r7, #0]
  return result;
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	fab2 f282 	clz	r2, r2
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	40d3      	lsrs	r3, r2
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	08004aac 	.word	0x08004aac

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d36:	f7ff ffcd 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d44:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	fa92 f2a2 	rbit	r2, r2
 8003d50:	603a      	str	r2, [r7, #0]
  return result;
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	fab2 f282 	clz	r2, r2
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	40d3      	lsrs	r3, r2
 8003d5c:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	08004aac 	.word	0x08004aac

08003d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b092      	sub	sp, #72	; 0x48
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80d4 	beq.w	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d98:	4b4e      	ldr	r3, [pc, #312]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10e      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4b4b      	ldr	r3, [pc, #300]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	4a4a      	ldr	r2, [pc, #296]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	61d3      	str	r3, [r2, #28]
 8003db0:	4b48      	ldr	r3, [pc, #288]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	4b45      	ldr	r3, [pc, #276]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d118      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dce:	4b42      	ldr	r3, [pc, #264]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a41      	ldr	r2, [pc, #260]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dda:	f7fd f9d9 	bl	8001190 <HAL_GetTick>
 8003dde:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	e008      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fd f9d5 	bl	8001190 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b64      	cmp	r3, #100	; 0x64
 8003dee:	d901      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e1d6      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	4b38      	ldr	r3, [pc, #224]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e00:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8084 	beq.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d07c      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e72:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04b      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fd f985 	bl	8001190 <HAL_GetTick>
 8003e86:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fd f981 	bl	8001190 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e180      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	2302      	movs	r3, #2
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	61fb      	str	r3, [r7, #28]
  return result;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d108      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ece:	4b01      	ldr	r3, [pc, #4]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	e00d      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40007000 	.word	0x40007000
 8003edc:	10908100 	.word	0x10908100
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	4b9a      	ldr	r3, [pc, #616]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	613a      	str	r2, [r7, #16]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	fa92 f2a2 	rbit	r2, r2
 8003efa:	60fa      	str	r2, [r7, #12]
  return result;
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	fab2 f282 	clz	r2, r2
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f002 021f 	and.w	r2, r2, #31
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0b7      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f1a:	4b8f      	ldr	r3, [pc, #572]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	498c      	ldr	r1, [pc, #560]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f34:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4a87      	ldr	r2, [pc, #540]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f4c:	4b82      	ldr	r3, [pc, #520]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	f023 0203 	bic.w	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	497f      	ldr	r1, [pc, #508]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f6a:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	4978      	ldr	r1, [pc, #480]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f88:	4b73      	ldr	r3, [pc, #460]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	4970      	ldr	r1, [pc, #448]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f023 0210 	bic.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4969      	ldr	r1, [pc, #420]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	4961      	ldr	r1, [pc, #388]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fe2:	4b5d      	ldr	r3, [pc, #372]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f023 0220 	bic.w	r2, r3, #32
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	495a      	ldr	r1, [pc, #360]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004000:	4b55      	ldr	r3, [pc, #340]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	4952      	ldr	r1, [pc, #328]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800401e:	4b4e      	ldr	r3, [pc, #312]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	494b      	ldr	r1, [pc, #300]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800402c:	4313      	orrs	r3, r2
 800402e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	4943      	ldr	r1, [pc, #268]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800404a:	4313      	orrs	r3, r2
 800404c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800405a:	4b3f      	ldr	r3, [pc, #252]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	493c      	ldr	r1, [pc, #240]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004068:	4313      	orrs	r3, r2
 800406a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004078:	4b37      	ldr	r3, [pc, #220]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	4934      	ldr	r1, [pc, #208]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004096:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	492d      	ldr	r1, [pc, #180]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	4925      	ldr	r1, [pc, #148]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80040d2:	4b21      	ldr	r3, [pc, #132]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	491e      	ldr	r1, [pc, #120]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80040f0:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	4916      	ldr	r1, [pc, #88]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	490f      	ldr	r1, [pc, #60]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800411c:	4313      	orrs	r3, r2
 800411e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	4907      	ldr	r1, [pc, #28]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800413a:	4313      	orrs	r3, r2
 800413c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00c      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	e002      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415e:	4913      	ldr	r1, [pc, #76]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004160:	4313      	orrs	r3, r2
 8004162:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	490b      	ldr	r1, [pc, #44]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800417e:	4313      	orrs	r3, r2
 8004180:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800418e:	4b07      	ldr	r3, [pc, #28]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419a:	4904      	ldr	r1, [pc, #16]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800419c:	4313      	orrs	r3, r2
 800419e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3748      	adds	r7, #72	; 0x48
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000

080041b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e040      	b.n	8004244 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fc feda 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0201 	bic.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9fc 	bl	80045f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f825 	bl	800424c <UART_SetConfig>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e01b      	b.n	8004244 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800421a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800422a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fa7b 	bl	8004738 <UART_CheckIdleState>
 8004242:	4603      	mov	r3, r0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b92      	ldr	r3, [pc, #584]	; (80044c0 <UART_SetConfig+0x274>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	430b      	orrs	r3, r1
 8004282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a80      	ldr	r2, [pc, #512]	; (80044c4 <UART_SetConfig+0x278>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d120      	bne.n	800430a <UART_SetConfig+0xbe>
 80042c8:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <UART_SetConfig+0x27c>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d817      	bhi.n	8004304 <UART_SetConfig+0xb8>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x90>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042f9 	.word	0x080042f9
 80042e4:	080042ff 	.word	0x080042ff
 80042e8:	080042f3 	.word	0x080042f3
 80042ec:	2301      	movs	r3, #1
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e0b5      	b.n	800445e <UART_SetConfig+0x212>
 80042f2:	2302      	movs	r3, #2
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e0b2      	b.n	800445e <UART_SetConfig+0x212>
 80042f8:	2304      	movs	r3, #4
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e0af      	b.n	800445e <UART_SetConfig+0x212>
 80042fe:	2308      	movs	r3, #8
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e0ac      	b.n	800445e <UART_SetConfig+0x212>
 8004304:	2310      	movs	r3, #16
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e0a9      	b.n	800445e <UART_SetConfig+0x212>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a6f      	ldr	r2, [pc, #444]	; (80044cc <UART_SetConfig+0x280>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d124      	bne.n	800435e <UART_SetConfig+0x112>
 8004314:	4b6c      	ldr	r3, [pc, #432]	; (80044c8 <UART_SetConfig+0x27c>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800431c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004320:	d011      	beq.n	8004346 <UART_SetConfig+0xfa>
 8004322:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004326:	d817      	bhi.n	8004358 <UART_SetConfig+0x10c>
 8004328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432c:	d011      	beq.n	8004352 <UART_SetConfig+0x106>
 800432e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004332:	d811      	bhi.n	8004358 <UART_SetConfig+0x10c>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <UART_SetConfig+0xf4>
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d006      	beq.n	800434c <UART_SetConfig+0x100>
 800433e:	e00b      	b.n	8004358 <UART_SetConfig+0x10c>
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e08b      	b.n	800445e <UART_SetConfig+0x212>
 8004346:	2302      	movs	r3, #2
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e088      	b.n	800445e <UART_SetConfig+0x212>
 800434c:	2304      	movs	r3, #4
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e085      	b.n	800445e <UART_SetConfig+0x212>
 8004352:	2308      	movs	r3, #8
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e082      	b.n	800445e <UART_SetConfig+0x212>
 8004358:	2310      	movs	r3, #16
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e07f      	b.n	800445e <UART_SetConfig+0x212>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5b      	ldr	r2, [pc, #364]	; (80044d0 <UART_SetConfig+0x284>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d124      	bne.n	80043b2 <UART_SetConfig+0x166>
 8004368:	4b57      	ldr	r3, [pc, #348]	; (80044c8 <UART_SetConfig+0x27c>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004370:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004374:	d011      	beq.n	800439a <UART_SetConfig+0x14e>
 8004376:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800437a:	d817      	bhi.n	80043ac <UART_SetConfig+0x160>
 800437c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004380:	d011      	beq.n	80043a6 <UART_SetConfig+0x15a>
 8004382:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004386:	d811      	bhi.n	80043ac <UART_SetConfig+0x160>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <UART_SetConfig+0x148>
 800438c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004390:	d006      	beq.n	80043a0 <UART_SetConfig+0x154>
 8004392:	e00b      	b.n	80043ac <UART_SetConfig+0x160>
 8004394:	2300      	movs	r3, #0
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e061      	b.n	800445e <UART_SetConfig+0x212>
 800439a:	2302      	movs	r3, #2
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e05e      	b.n	800445e <UART_SetConfig+0x212>
 80043a0:	2304      	movs	r3, #4
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e05b      	b.n	800445e <UART_SetConfig+0x212>
 80043a6:	2308      	movs	r3, #8
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e058      	b.n	800445e <UART_SetConfig+0x212>
 80043ac:	2310      	movs	r3, #16
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e055      	b.n	800445e <UART_SetConfig+0x212>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a47      	ldr	r2, [pc, #284]	; (80044d4 <UART_SetConfig+0x288>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d124      	bne.n	8004406 <UART_SetConfig+0x1ba>
 80043bc:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <UART_SetConfig+0x27c>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80043c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043c8:	d011      	beq.n	80043ee <UART_SetConfig+0x1a2>
 80043ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ce:	d817      	bhi.n	8004400 <UART_SetConfig+0x1b4>
 80043d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043d4:	d011      	beq.n	80043fa <UART_SetConfig+0x1ae>
 80043d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043da:	d811      	bhi.n	8004400 <UART_SetConfig+0x1b4>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <UART_SetConfig+0x19c>
 80043e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e4:	d006      	beq.n	80043f4 <UART_SetConfig+0x1a8>
 80043e6:	e00b      	b.n	8004400 <UART_SetConfig+0x1b4>
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e037      	b.n	800445e <UART_SetConfig+0x212>
 80043ee:	2302      	movs	r3, #2
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e034      	b.n	800445e <UART_SetConfig+0x212>
 80043f4:	2304      	movs	r3, #4
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e031      	b.n	800445e <UART_SetConfig+0x212>
 80043fa:	2308      	movs	r3, #8
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e02e      	b.n	800445e <UART_SetConfig+0x212>
 8004400:	2310      	movs	r3, #16
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e02b      	b.n	800445e <UART_SetConfig+0x212>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a33      	ldr	r2, [pc, #204]	; (80044d8 <UART_SetConfig+0x28c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d124      	bne.n	800445a <UART_SetConfig+0x20e>
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <UART_SetConfig+0x27c>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004418:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800441c:	d011      	beq.n	8004442 <UART_SetConfig+0x1f6>
 800441e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004422:	d817      	bhi.n	8004454 <UART_SetConfig+0x208>
 8004424:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004428:	d011      	beq.n	800444e <UART_SetConfig+0x202>
 800442a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800442e:	d811      	bhi.n	8004454 <UART_SetConfig+0x208>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <UART_SetConfig+0x1f0>
 8004434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004438:	d006      	beq.n	8004448 <UART_SetConfig+0x1fc>
 800443a:	e00b      	b.n	8004454 <UART_SetConfig+0x208>
 800443c:	2300      	movs	r3, #0
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e00d      	b.n	800445e <UART_SetConfig+0x212>
 8004442:	2302      	movs	r3, #2
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e00a      	b.n	800445e <UART_SetConfig+0x212>
 8004448:	2304      	movs	r3, #4
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e007      	b.n	800445e <UART_SetConfig+0x212>
 800444e:	2308      	movs	r3, #8
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e004      	b.n	800445e <UART_SetConfig+0x212>
 8004454:	2310      	movs	r3, #16
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e001      	b.n	800445e <UART_SetConfig+0x212>
 800445a:	2310      	movs	r3, #16
 800445c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004466:	d16b      	bne.n	8004540 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004468:	7ffb      	ldrb	r3, [r7, #31]
 800446a:	2b08      	cmp	r3, #8
 800446c:	d838      	bhi.n	80044e0 <UART_SetConfig+0x294>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <UART_SetConfig+0x228>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	080044e1 	.word	0x080044e1
 8004484:	080044af 	.word	0x080044af
 8004488:	080044e1 	.word	0x080044e1
 800448c:	080044e1 	.word	0x080044e1
 8004490:	080044e1 	.word	0x080044e1
 8004494:	080044b7 	.word	0x080044b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004498:	f7ff fc28 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 800449c:	61b8      	str	r0, [r7, #24]
        break;
 800449e:	e024      	b.n	80044ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a0:	f7ff fc46 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80044a4:	61b8      	str	r0, [r7, #24]
        break;
 80044a6:	e020      	b.n	80044ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <UART_SetConfig+0x290>)
 80044aa:	61bb      	str	r3, [r7, #24]
        break;
 80044ac:	e01d      	b.n	80044ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ae:	f7ff fbbd 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 80044b2:	61b8      	str	r0, [r7, #24]
        break;
 80044b4:	e019      	b.n	80044ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ba:	61bb      	str	r3, [r7, #24]
        break;
 80044bc:	e015      	b.n	80044ea <UART_SetConfig+0x29e>
 80044be:	bf00      	nop
 80044c0:	efff69f3 	.word	0xefff69f3
 80044c4:	40013800 	.word	0x40013800
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40004400 	.word	0x40004400
 80044d0:	40004800 	.word	0x40004800
 80044d4:	40004c00 	.word	0x40004c00
 80044d8:	40005000 	.word	0x40005000
 80044dc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77bb      	strb	r3, [r7, #30]
        break;
 80044e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d073      	beq.n	80045d8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	005a      	lsls	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	441a      	add	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d916      	bls.n	800453a <UART_SetConfig+0x2ee>
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004512:	d212      	bcs.n	800453a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f023 030f 	bic.w	r3, r3, #15
 800451c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	b29a      	uxth	r2, r3
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	4313      	orrs	r3, r2
 800452e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	89fa      	ldrh	r2, [r7, #14]
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	e04e      	b.n	80045d8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	77bb      	strb	r3, [r7, #30]
 800453e:	e04b      	b.n	80045d8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004540:	7ffb      	ldrb	r3, [r7, #31]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d827      	bhi.n	8004596 <UART_SetConfig+0x34a>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x300>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7ff fbbc 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8004574:	61b8      	str	r0, [r7, #24]
        break;
 8004576:	e013      	b.n	80045a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7ff fbda 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 800457c:	61b8      	str	r0, [r7, #24]
        break;
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <UART_SetConfig+0x3a4>)
 8004582:	61bb      	str	r3, [r7, #24]
        break;
 8004584:	e00c      	b.n	80045a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7ff fb51 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 800458a:	61b8      	str	r0, [r7, #24]
        break;
 800458c:	e008      	b.n	80045a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004592:	61bb      	str	r3, [r7, #24]
        break;
 8004594:	e004      	b.n	80045a0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	77bb      	strb	r3, [r7, #30]
        break;
 800459e:	bf00      	nop
    }

    if (pclk != 0U)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d018      	beq.n	80045d8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	085a      	lsrs	r2, r3, #1
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d909      	bls.n	80045d4 <UART_SetConfig+0x388>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d205      	bcs.n	80045d4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e001      	b.n	80045d8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	007a1200 	.word	0x007a1200

080045f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01a      	beq.n	800470a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f2:	d10a      	bne.n	800470a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b098      	sub	sp, #96	; 0x60
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004748:	f7fc fd22 	bl	8001190 <HAL_GetTick>
 800474c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b08      	cmp	r3, #8
 800475a:	d12e      	bne.n	80047ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004764:	2200      	movs	r2, #0
 8004766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f88c 	bl	8004888 <UART_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d021      	beq.n	80047ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800478a:	653b      	str	r3, [r7, #80]	; 0x50
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004794:	647b      	str	r3, [r7, #68]	; 0x44
 8004796:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800479a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e6      	bne.n	8004776 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e062      	b.n	8004880 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d149      	bne.n	800485c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f856 	bl	8004888 <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d03c      	beq.n	800485c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	623b      	str	r3, [r7, #32]
   return(result);
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
 8004802:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e6      	bne.n	80047e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60fb      	str	r3, [r7, #12]
   return(result);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	64bb      	str	r3, [r7, #72]	; 0x48
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004834:	61fa      	str	r2, [r7, #28]
 8004836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	617b      	str	r3, [r7, #20]
   return(result);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e011      	b.n	8004880 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3758      	adds	r7, #88	; 0x58
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004898:	e04f      	b.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d04b      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a2:	f7fc fc75 	bl	8001190 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d302      	bcc.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e04e      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d037      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d034      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d031      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d110      	bne.n	8004906 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2208      	movs	r2, #8
 80048ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f838 	bl	8004962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2208      	movs	r2, #8
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e029      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004914:	d111      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800491e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f81e 	bl	8004962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e00f      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	429a      	cmp	r2, r3
 8004956:	d0a0      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004962:	b480      	push	{r7}
 8004964:	b095      	sub	sp, #84	; 0x54
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004988:	643b      	str	r3, [r7, #64]	; 0x40
 800498a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800498e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e6      	bne.n	800496a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d118      	bne.n	8004a0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f023 0310 	bic.w	r3, r3, #16
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6979      	ldr	r1, [r7, #20]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	613b      	str	r3, [r7, #16]
   return(result);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e6      	bne.n	80049d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a1e:	bf00      	nop
 8004a20:	3754      	adds	r7, #84	; 0x54
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <memset>:
 8004a2a:	4402      	add	r2, r0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d100      	bne.n	8004a34 <memset+0xa>
 8004a32:	4770      	bx	lr
 8004a34:	f803 1b01 	strb.w	r1, [r3], #1
 8004a38:	e7f9      	b.n	8004a2e <memset+0x4>
	...

08004a3c <__libc_init_array>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4d0d      	ldr	r5, [pc, #52]	; (8004a74 <__libc_init_array+0x38>)
 8004a40:	4c0d      	ldr	r4, [pc, #52]	; (8004a78 <__libc_init_array+0x3c>)
 8004a42:	1b64      	subs	r4, r4, r5
 8004a44:	10a4      	asrs	r4, r4, #2
 8004a46:	2600      	movs	r6, #0
 8004a48:	42a6      	cmp	r6, r4
 8004a4a:	d109      	bne.n	8004a60 <__libc_init_array+0x24>
 8004a4c:	4d0b      	ldr	r5, [pc, #44]	; (8004a7c <__libc_init_array+0x40>)
 8004a4e:	4c0c      	ldr	r4, [pc, #48]	; (8004a80 <__libc_init_array+0x44>)
 8004a50:	f000 f818 	bl	8004a84 <_init>
 8004a54:	1b64      	subs	r4, r4, r5
 8004a56:	10a4      	asrs	r4, r4, #2
 8004a58:	2600      	movs	r6, #0
 8004a5a:	42a6      	cmp	r6, r4
 8004a5c:	d105      	bne.n	8004a6a <__libc_init_array+0x2e>
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a64:	4798      	blx	r3
 8004a66:	3601      	adds	r6, #1
 8004a68:	e7ee      	b.n	8004a48 <__libc_init_array+0xc>
 8004a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6e:	4798      	blx	r3
 8004a70:	3601      	adds	r6, #1
 8004a72:	e7f2      	b.n	8004a5a <__libc_init_array+0x1e>
 8004a74:	08004ad4 	.word	0x08004ad4
 8004a78:	08004ad4 	.word	0x08004ad4
 8004a7c:	08004ad4 	.word	0x08004ad4
 8004a80:	08004ad8 	.word	0x08004ad8

08004a84 <_init>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	bf00      	nop
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr

08004a90 <_fini>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr
